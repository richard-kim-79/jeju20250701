// This is your Prisma schema file
// Postgres + 제주 SNS 모델

generator client {
  provider = "prisma-client-js"
  output   = "./src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  posts    Post[]
  likes    Like[]
  comments Comment[]
  adImpressions AdImpression[]
  adClicks      AdClick[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id        String   @id @default(cuid())
  content   String   @db.Text
  images    String   @db.Text // JSON 문자열로 저장
  views     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  authorId String
  author   User     @relation(fields: [authorId], references: [id], onDelete: Cascade)

  likes    Like[]
  comments Comment[]

  @@index([authorId])
  @@index([createdAt])
}

model Like {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@index([postId])
}

model Comment {
  id        String   @id @default(cuid())
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  authorId String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)

  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([postId])
  @@index([authorId])
}

model Advertisement {
  id             String   @id @default(cuid())
  title          String
  description    String   @db.Text
  imageUrl       String
  linkUrl        String
  advertiserId   String
  category       String
  location       String?
  startDate      DateTime
  endDate        DateTime
  isActive       Boolean  @default(true)
  impressionCount Int      @default(0)
  clickCount      Int      @default(0)
  ctr            Float    @default(0)
  budget         Int      @default(0)
  spent          Int      @default(0)
  targetAudience String   @db.Text // JSON 문자열로 저장
  tags           String   @db.Text // JSON 문자열로 저장
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  advertiser Advertiser     @relation(fields: [advertiserId], references: [id], onDelete: Cascade)
  impressions AdImpression[]
  clicks      AdClick[]

  @@index([advertiserId])
  @@index([category])
  @@index([isActive])
}

model Advertiser {
  id          String   @id @default(cuid())
  name        String
  logo        String?
  email       String   @unique
  phone       String?
  address     String?
  description String?  @db.Text
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  advertisements Advertisement[]

  @@index([isActive])
}

model AdImpression {
  id        String   @id @default(cuid())
  adId      String
  userId    String?
  timestamp DateTime @default(now())
  userAgent String
  ipAddress String
  referrer  String

  ad   Advertisement @relation(fields: [adId], references: [id], onDelete: Cascade)
  user User?         @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([adId])
  @@index([timestamp])
}

model AdClick {
  id        String   @id @default(cuid())
  adId      String
  userId    String?
  timestamp DateTime @default(now())
  userAgent String
  ipAddress String
  referrer  String

  ad   Advertisement @relation(fields: [adId], references: [id], onDelete: Cascade)
  user User?         @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([adId])
  @@index([timestamp])
} 